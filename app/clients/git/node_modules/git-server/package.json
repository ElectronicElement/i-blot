{
  "name": "git-server",
  "version": "0.2.1",
  "description": "A simple, multi-tenant git server written in NodeJS",
  "author": {
    "name": "Quinton Pike",
    "email": "@quinton.pike"
  },
  "contributors": [
    {
      "name": "Quinton Pike",
      "email": "qrpike@gmail.com"
    },
    {
      "name": "Justas Brazauskas",
      "email": "brazauskasjustas@gmail.con"
    },
    {
      "name": "Gabriel J. Csapo",
      "email": "gabecsapo@gmail.com"
    }
  ],
  "dependencies": {
    "async": "^2.0.0",
    "cli-listener": "0.0.4",
    "cli-table": "^0.3.1",
    "commander": "^2.9.0",
    "connect": "~2.9.0",
    "event-proxy": "0.0.1",
    "git-emit": "0.0.0",
    "mkdirp": "^0.5.1",
    "pushover": "^1.3.6"
  },
  "devDependencies": {
    "blanket": "~1.1.5",
    "chai": "^3.5.0",
    "coveralls": "^2.11.14",
    "mocha": "^3.1.2",
    "mocha-lcov-reporter": "^1.2.0"
  },
  "scripts": {
    "test": "make test"
  },
  "keywords": [
    "git",
    "github",
    "git server",
    "git hosting",
    "git http"
  ],
  "repository": {
    "type": "git",
    "url": "git+https://github.com/qrpike/NodeJS-Git-Server.git"
  },
  "homepage": "http://qrpike.github.io/NodeJS-Git-Server/host.coffee.html",
  "main": "main.js",
  "bin": {
    "git-server": "cli.js",
    "gitserver": "cli.js"
  },
  "engines": {
    "node": ">=4"
  },
  "preferGlobal": true,
  "gitHead": "3be1aa65d428568dcd105d7c9062ab90260b10e1",
  "readme": "# NodeJS Git Server\n\n![image](https://raw.github.com/qrpike/NodeJS-Git-Server/master/header.png)\n[![Build Status](https://travis-ci.org/stackdot/NodeJS-Git-Server.svg?branch=master)](https://travis-ci.org/stackdot/NodeJS-Git-Server) [![Coverage Status](https://coveralls.io/repos/github/qrpike/NodeJS-Git-Server/badge.svg?branch=master)](https://coveralls.io/github/qrpike/NodeJS-Git-Server?branch=master)\n\nA multi-tenant git server using NodeJS.\n\nRead the [Documented Source Code Here](http://qrpike.github.io/NodeJS-Git-Server/host.coffee.html)\n\nMade to be able to support many git repo's and users with Read/Write customizable permissions.\n\n\n# Install Git Server\n\nTo install the git server run:\n\n\tnpm install git-server\n\nTo run tests\n\n\tgit clone https://github.com/qrpike/NodeJS-Git-Server.git\n\tcd ./NodeJS-Git-Server\n\tmake test\n\n\n# Example Usage\n\nThe GitServer is a very easy to get up and running git server. It uses the [Pushover](https://github.com/substack/pushover) and [git-emit](https://github.com/substack/node-git-emit) modules for listening to git events, and its own layer to do the security for each repo & user.\n\n```javascript\n\tvar GitServer = require('git-server');\n\tvar newUser = {\n\t\tusername:'demo',\n\t\tpassword:'demo'\n\t}\n\tvar newRepo = {\n\t\tname:'myrepo',\n\t\tanonRead:false,\n\t\tusers: [\n\t\t\t{ user:newUser, permissions:['R','W'] }\n\t\t]\n\t}\n\tserver = new GitServer({repos: [ newRepo ]});\n```\n\n# Events:\n\nServer object emits these events:\n\n##passive events\n\nThese events are informational only. They can not be aborted.\n\n* post-applypatch\n* post-commit\n* post-checkout\n* post-merge\n* post-receive\n* post-update\n* post-rewrite\n\n##abortable events\n\nThese events can be aborted or accepted. If there will be no listeners for any of these events, they will be automatically accepted. If object can be aborted, it will have canAbort property in update argument.\n\n* fetch\n* commit\n* applypatch-msg\n* pre-applypatch\n* pre-commit\n* prepare-commit-msg\n* commit-msg\n* pre-rebase\n* pre-receive\n* update\n* pre-auto-gc\n\n```javascript\n\tvar GitServer = require('git-server');\n\tvar newUser = {\n\t\tusername:'demo',\n\t\tpassword:'demo'\n\t}\n\tvar newRepo = {\n\t\tname:'myrepo',\n\t\tanonRead:false,\n\t\tusers: [\n\t\t\t{ user:newUser, permissions:['R','W'] }\n\t\t]\n\t}\n\tserver = new GitServer({repos: [ newRepo ]});\n\tserver.on('commit', function(update, repo) {\n\t\t// do some logging or other stuff\n\t\tupdate.accept() //accept the update.\n\t});\n\tserver.on('post-update', function(update, repo) {\n\t\t//do some deploy stuff\n\t});\n```\n\nWhen we start the git server, it will default to port 7000. We can test this using git on this (or another ) machine.\n\n```\n\tgit clone http://localhost:7000/myrepo.git\n```\n\nSince this repo does *NOT* allow anonymous reading, it will prompt us for a user/pass\n\nTo make this faster, we can use the basic auth structure:\n\n\tgit clone http://demo:demo@localhost:7000/myrepo.git\n\nThis should not prompt you for any user/pass. Also in the future when you push changes, or pull, it will not ask you for this info again.\n\n## Repo object\n\nRepo object is the object passed to start the server plus some additional methods and properties.\n\n```javascript\n{\n  name: 'stackdot',\n  anonRead: false,\n  users: [ { user: {username: \"demo\", password: \"demo\"}, permissions: [\"R\", \"W\"] } ],\n  path: '/tmp/repos/stackdot.git',\n  last_commit: {\n  \tstatus: 'pending',\n  \trepo: 'anon.git',\n  \tservice: 'receive-pack',\n  \tcwd: '/tmp/repos/stackdot.git',\n  \tlast: '00960000000000000000000000000000000000000000',\n  \tcommit: '67359bb4a6cddd97b59507413542e0b08ef078b0',\n  \tevName: 'push',\n  \tbranch: 'master'\n  }\n}\n```\n\n## Update object\n\n`update` is an http duplex object (see below) with these extra properties:\n\n```javascript\n{\n  cwd: '/tmp/repos/stackdot.git', // Current repo dir\n  repo: 'stackdot.git', // Repo name\n  accept: [Function], // Method to accept request (if aplicable)\n  reject: [Function], // Method to reject request (if aplicable)\n  exists: true, // Does the repo exist\n  name: 'fetch', // Event name\n  canAbort: true // If event can be abbortable\n}\n```\n\n# HTTPS\n\nThe ability to use HTTPS is now implemented for the module and the cli. This is important so that your username & password is encrypted when being sent over the wire. If you are not using username/password then you may want to disregard this section.\n\nTo enable HTTPS in the module, use the 'cert' param:\n\n```javascript\n\tvar fs = require('fs');\n\tvar certs = {\n\t\tkey\t\t: fs.readFileSync('../certs/privatekey.pem')\n\t\tcert\t: fs.readFileSync('../certs/certificate.pem')\n\t};\n\t_g = new GitServer({repos: [ newRepo ]}, undefined, undefined, undefined, certs);\n```\n\nTo enable HTTPS in the cli, use the '--ssl' option along with '--key' and '--cert' options:\n\n\tgit-server[|gitserver] --ssl --key ../certs/privatekey.pem --cert ../certs/certificate.pem\n\nTo create these certs you can run:\n\n\topenssl genrsa -out privatekey.pem 1024\n\topenssl req -new -key privatekey.pem -out certrequest.csr\n\topenssl x509 -req -in certrequest.csr -signkey privatekey.pem -out certificate.pem\n\nAlso, be aware that when using HTTPS for the git server, when you try to clone,etc. It will give you an SSL error because git (which uses CURL) cannot verify the SSL Cert. To correct this, install a actual, verified SSL Cert ( Free ones here: [StartCom](http://www.startssl.com/?app=1) )\n\nIf you want to keep using the self signed cert like we created above ^ just tell git to not verify the cert. ( Other ways to do it [here](http://www.f15ijp.com/2012/08/git-ssl-certificate-problem-how-to-turn-off-ssl-validation-for-a-repo/) )\n\n\texport GIT_SSL_NO_VERIFY=true\n\nAnd you are good to go!\n\n# CLI Usage\n\n\nWhen you install this package globally using\n\n```\n\tsudo npm install -g git-server\n```\n\nYou will now have a CLI interface you can run and interact with.\n\nGet started by typing `git-server` or `gitserver` into your terminal.\n\nYou should see something similar to this:\n![image](https://raw.github.com/qrpike/NodeJS-Git-Server/master/cli-screenshot.png)\n\nWith this interface you can type the following to see the available commands:\n\n\tgit-server> help\n\nYou will see a list of possible commands, just enter a command and the prompt will ask you for any additional details needed.\n\n# TODO Items\n\n- Make YouTube demo of the app\n\n### This is a work in progress - please feel free to contribute!\nplease contribute\n#License\n\n(The MIT License)\n\nCopyright (c) 2016 [Quinton Pike](https://twitter.com/QuintonPike)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/qrpike/NodeJS-Git-Server/issues"
  },
  "_id": "git-server@0.2.1",
  "_shasum": "7aebc4795f75ff0d779237217c827923e6ac118a",
  "_from": "git+https://github.com/stackdot/NodeJS-Git-Server.git",
  "_resolved": "git+https://github.com/stackdot/NodeJS-Git-Server.git#3be1aa65d428568dcd105d7c9062ab90260b10e1"
}
