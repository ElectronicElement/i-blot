var Buffer = require('safe-buffer').Buffer;
var debug = require('debug')('compression');
var onHeaders = require('on-headers');
var fs = require('fs-extra');
var join   = require('path').join;
var dirname = require('path').dirname;
var config = require('config');

module.exports = disk_cache;
module.exports.filter = shouldCompress;

var cacheControlNoTransformRegExp = /(?:^|,)\s*?no-transform\s*?(?:,|$)/;
var cacheControlNoCache = /(?:^|,)\s*?no-cache\s*?(?:,|$)/;

function disk_cache (req, res, next) {

 // Never cache requests with sessions of any sort
  // This is to prevent user data leaking into the cache
  if (req.session && req.session.uid) return next();

  var filter = shouldCompress;
  var ended = false;
  var listeners = [];
  var stream;

  var _end = res.end;
  var _on = res.on;
  var _write = res.write;

  res.write = function write (chunk, encoding) {

    if (ended) return false;

    _write.call(this, chunk, encoding);

    if (stream) stream.write(Buffer.from(chunk, encoding));
  };

  res.end = function end (chunk, encoding) {

    if (ended) return false;

    _end.call(this, chunk, encoding);

    ended = true;

    if (stream && chunk) return stream.end(Buffer.from(chunk, encoding));

    if (stream && !chunk) return stream.end();
  };

  res.on = function on (type, listener) {
    
    if (!listeners || type !== 'drain') {
      return _on.call(this, type, listener);
    }

    if (stream) return stream.on(type, listener);

    // buffer listeners for future stream
    listeners.push([type, listener]);

    return this;
  };

  function nocache (msg) {
    debug('no compression: %s', msg);
    addListeners(res, _on, listeners);
    listeners = null;
  }

  onHeaders(res, function onResponseHeaders () {

    // determine if request is filtered
    if (!filter(req, res)) {
      nocache('filtered');
      return;
    }

    // determine if the entity should be transformed
    if (!shouldTransform(req, res)) {
      nocache('no transform');
      return;
    }

    var contentType = res.getHeader('Content-Type');

    if (req.method === 'HEAD') {
      nocache('HEAD request');
      return;
    }

    if (res.statusCode !== 200) {
      nocache('BAD status');
      return;
    }

    // We must use baseUrl because some of the middleware
    // is mounted in such a way that req.path doesn't
    // return the full path of the request
    // use req.originalUrl if you want the query string
    // use req.baseUrl
    var request_path = req.baseUrl + req.path;
    var output = join(config.cache_directory, req.hostname, request_path);
  
    if (contentType.indexOf('text/html') > -1 && req.path.indexOf('.') === -1)  {
      output  = join(output, 'index.html');
    }
      
    // // Don't cache the json used to render the homepage.
    // if (req.path === '/' && contentType.indexOf('text/html') === -1) {
    //    nocache('is JSON');
    //     return;
    // }
      
    fs.ensureDirSync(dirname(output));
    stream = fs.createWriteStream(output);

    // add buffered listeners to stream
    addListeners(stream, stream.on, listeners);

    // compression
    stream.on('data', function onStreamData (chunk) {
      if (_write.call(res, chunk) === false) {
        stream.pause();
      }
    });

    stream.on('end', function onStreamEnd () {
      _end.call(res);
    });

    // _on.call(res, 'drain', function onResponseDrain () {
    //   stream.resume();
    // });
  });

  next();
}

/**
 * Add bufferred listeners to stream
 */

function addListeners (stream, on, listeners) {
  for (var i = 0; i < listeners.length; i++) {
    on.apply(stream, listeners[i]);
  }
}


/**
 * Default filter function.
 * @private
 */

function shouldCompress (req, res) {

  var cacheControl = res.getHeader('Cache-Control');
  
  // Don't compress for Cache-Control: no-cache
  // https://tools.ietf.org/html/rfc7234#section-5.2.2.4
  return !cacheControl || !cacheControlNoCache.test(cacheControl);
}

/**
 * Determine if the entity should be transformed.
 * @private
 */

function shouldTransform (req, res) {

  var cacheControl = res.getHeader('Cache-Control');

  // Don't compress for Cache-Control: no-transform
  // https://tools.ietf.org/html/rfc7234#section-5.2.2.4
  return !cacheControl || !cacheControlNoTransformRegExp.test(cacheControl);
}