var mustache = require('mustache');
var input = "Apps\nBooks\nDev's blog\n  Test.md\n  Foo.txt";
var fs = require('fs-extra');
var cheerio = require('cheerio');
var template = fs.readFileSync(__dirname + '/window.mustache', 'utf8');
var texteditor_template = fs.readFileSync(__dirname + '/texteditor.mustache', 'utf8');
var wrapper = fs.readFileSync(__dirname + '/wrapper.mustache', 'utf8');
var highlight = require('highlight.js');

// console.log(highlight.highlight('html','<html>\n\t<head>\n\t\t<title>{{title}}</title>\n\t</head>\n\t<body>\n\t\t{{#posts}}\n\t\t<a href="{{url}}">{{title}}</a>\n\t\t{{/posts}}\n\t</body>\n</html>').value);

function extension (filename) {
  var extension = '';

  if (filename.indexOf('.') === -1) return 'folder';

  extension = filename.slice(filename.lastIndexOf('.') + 1);

  if (['jpg', 'jpeg', 'gif', 'png'].indexOf(extension) > -1)
    extension = 'img';

  if (['css', 'js'].indexOf(extension) > -1)
    extension = 'md';

  return extension;
}

function main (input) {

  input = input.trim();

  var files = input.split('\n');

  for (var i = 0;i < files.length;i++) {

    var file = {};

    file.name = files[i].trim();
    file.nested = files[i][0] !== files[i].trim()[0];
    file.open = false;

    // Indicate the parent folder for this file
    // we use this info to rotate the arrow next to the
    // folder icon in the finder.
    if (file.nested && !files[i - 1].nested)
      files[i - 1].open = 'open';

    file.file = file.name.indexOf('.') > -1;
    file.folder = !file.file;

    if (file.file)
      file.extension = extension(file.name);

    if (file.open)
      file.open = 'open';
    else 
      file.open = '';

    if (file.nested)
      file.nested = 'nested';
    else 
      file.nested = '';

    if (file.folder)
      file.folder = 'folder';
    else 
      file.folder = '';

    if (file.file)
      file.file = 'file';
    else 
      file.file = '';


    files[i] = file;
  }

  var output = mustache.render(template, {contents: files, title: 'Your blog'});


  return output;
}

function texteditor(text) {
  return mustache.render(texteditor_template, {text: text, title: 'Your post.txt'});
}

function exports (html, callback) {

  var $ = cheerio.load(html);

  $('pre.folder').each(function(i, el){

    var source = $(el).find('code').length ? $(el).find('code').first() : $(el);
    var html = main(source.html());

    $(el).replaceWith(html);
  }); 

  $('code.file, code.folder').each(function(i, el){

    var text = $(el).html().trim();
    var type = $(el).attr('class').split('file').join('').trim() || extension(text) ;

    $(el).replaceWith('<nobr><icon class="' + type + '"></icon> ' + text + '</nobr>');

  });

  $('pre.file').each(function(i, el){

    var html = texteditor($(el).html());

    $(el).replaceWith(html);
  }); 

  callback(null, $.html());
}

function middleware (req, res, next) {

  function special_render (view) {

    res.render(view, {}, function(err, html){
        
      var $ = cheerio.load(html);

      $('pre').each(function(i, el){
        
        var lang = $(el).children('code').first().attr('class');

        if (lang) lang = lang.split('lang-').join('');

        $(el).addClass(lang);
      });

      html = $.html();

      exports(html, function(err, html){

        res.send(html);
      });
    });

  }

  res.special_render = special_render;

  next();
}

exports.middleware = middleware;

module.exports = exports;