worker_processes  4;
worker_rlimit_nofile 10000;

error_log stderr;

pid /var/run/nginx.pid;

events {
    worker_connections 10000;
    multi_accept on;
}

http {

    error_log /var/www/blot/logs/nginx.log crit;
    access_log off;

    include /var/www/blot/config/nginx/auto-ssl-init.conf;

    upstream blot_node {
        server 127.0.0.1:8080;
        keepalive 64;
    }

    server {

        listen       443 ssl;
        listen 80 default_server;
        ssl on;

        ssl_certificate  /etc/letsencrypt/live/blot.im/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/blot.im/privkey.pem;

        ssl_protocols TLSv1.2 TLSv1.1 TLSv1;

        ssl_ciphers 'ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:AES:CAMELLIA:DES-CBC3-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!aECDH:!EDH-DSS-DES-CBC3-SHA:!EDH-RSA-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA';

        ssl_prefer_server_ciphers on;
        ssl_dhparam /var/www/blot/config/secrets/dhparams.pem;

        # we don't need to specify the health
        # route here since the checker only
        # listens over HTTP

        error_page 400 500 502 503 504 /500.html;

        location /500.html {
           return 200 'Bad request!';
        }

        # This is used to determine whether the server is handling
        # requests, don't remove it unless you change monit.rc too!
        location = /health {
            return 200;
        }

        location / {
            proxy_pass http://blot_node;
            proxy_http_version 1.1;

            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';

            proxy_cache_bypass $http_upgrade;
            proxy_read_timeout 5m;
            proxy_connect_timeout 5m;
            proxy_redirect off;
        }
    }
}