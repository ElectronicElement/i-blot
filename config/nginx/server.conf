include /var/www/blot/config/nginx/initial.conf;

http {

    error_log /var/www/blot/logs/nginx.log crit;
    access_log off;

    include /var/www/blot/config/nginx/auto-ssl-init.conf;

    upstream blot_node {
        server 127.0.0.1:8080;
        keepalive 64;
    }


    server {

        include /var/www/blot/config/nginx/auto-ssl.conf;

        server_name  blot.im blot.development;

        error_page 400 500 502 503 504 /500.html;

        location /500.html {
           return 200 'Bad request!';
        }

        # This is used to determine whether the server is handling
        # requests, don't remove it unless you change monit.rc too!
        location = /health {
            return 200;
        }

        # Stripe also sets a cookie so you
        # can't just check if a cookie exists
        # You have to check for the type of cookie
        # set by Express which handles Blot's
        # dashboard sessions.
        if ($cookie_connect.sid) {
            rewrite ^ /dashboard$uri break;
        }

        location /dashboard {
            rewrite ^/dashboard(.*)$ $1 last;
            include /var/www/blot/config/nginx/reverse-proxy.conf;
        }

        include /var/www/blot/config/nginx/static-file-cache.conf;

        location @blot {
            include /var/www/blot/config/nginx/reverse-proxy.conf;
        }
    }



    server {

        include /var/www/blot/config/nginx/auto-ssl.conf;

        error_page 400 500 502 503 504 /500.html;

        location /500.html {
           return 200 'Bad request!';
        }

        # This is used to determine whether the server is handling
        # requests, don't remove it unless you change monit.rc too!
        location = /health {
            return 200;
        }

        location / {
            proxy_pass http://blot_node;
            proxy_http_version 1.1;

            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';

            proxy_cache_bypass $http_upgrade;
            proxy_read_timeout 5m;
            proxy_connect_timeout 5m;
            proxy_redirect off;
        }
    }
}