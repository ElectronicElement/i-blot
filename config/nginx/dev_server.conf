worker_processes  4;
worker_rlimit_nofile 10000;

error_log stderr;

pid /var/run/nginx.pid;

events {
    worker_connections 10000;
    multi_accept on;
}

http {

    error_log /var/www/blot/logs/nginx.log crit;
    access_log off;

    upstream blot_node {
        server 127.0.0.1:8080;
        keepalive 64;
    }

    server {

        listen       443 ssl;
        server_name  blot.im blot.development;
        ssl on;

        ssl_certificate  /var/www/blot/config/secrets/ssl/cert.pem;
        ssl_certificate_key /var/www/blot/config/secrets/ssl/key.pem;

        error_page 400 500 502 503 504 /500.html;

        location /500.html {
           return 200 'Bad request!';
        }

        location / {
            proxy_pass http://blot_node;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_read_timeout 5m;
            proxy_connect_timeout 5m;
            proxy_redirect off;
        }
    }

    # map $host $uid {
    #    include /var/www/blot/config/host-id.txt;
    # }

    server {

        listen 80 default_server;
        error_page 400 500 502 503 504 /500.html;

        # root /var/www/blot/;
        # set $global /blogs/*/$uri;
        # set $cache /www/blogs/$uid/$uri;
        # set $folder /blogs/$uid/folder/$uri;
        # location / {
        #    try_files $cache $folder $global @blot;
        # }

        # This is used to determine whether the server is handling
        # requests, don't remove it unless you change monit.rc too!
        location = /health {
            return 200;
        }

        location = /ting {
            add_header Content-Type text/plain;
            return 200 'tong!';
        }

        location / {
            proxy_pass http://blot_node;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_cache_bypass $http_upgrade;
        }
    }
}
